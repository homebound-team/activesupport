import "./asyncFilter";
import "./asyncFlatMap";
import "./asyncForEach";
import "./asyncMap";
import "./asyncSome";
import "./batched";
import "./compact";
import "./count";
import "./each";
import "./everyHasSame";
import "./findAfter";
import "./findAndRemove";
import "./findBefore";
import "./first";
import "./groupBy";
import "./isEmpty";
import "./keyBy";
import "./last";
import "./mapToObject";
import "./max";
import "./min";
import "./nonEmpty";
import "./partition";
import "./remove";
import "./sentenceJoin";
import "./sortBy";
import "./sum";
import "./toObject";
import "./unique";

export type CallbackFn<T, R = any> = (element: T, index: number, array: T[]) => R;
export type CallbackFnRO<T, R = any> = (element: T, index: number, array: readonly T[]) => R;
export type ToArray<T> = T extends any ? T[] : never;
export type ToReadonlyArray<T> = T extends any ? readonly T[] : never;
